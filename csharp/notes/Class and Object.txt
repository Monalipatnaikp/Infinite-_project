Class and Object:
A class is a blueprint, while an object is its working copy (instance).
Objects contain data, behavior, and state.

This Keyword:
The this keyword points to the current object or instance.
It helps in resolving naming conflicts in class members.

Encapsulation:
It is the wrapping of data and methods into a single unit.
Access is controlled using access specifiers.

Abstraction:
Only essential details are shown; the rest are hidden.
It simplifies complexity and increases efficiency.

Inheritance:
It enables one class to acquire properties of another.
This promotes code reusability and hierarchy.

Polymorphism:
One action behaves differently in different situations.
It can be method overloading or overriding.

Constructors:
Special methods that initialize objects of a class.
They have the same name as the class and no return type.

Methods and Parameters:
C# allows parameters to be passed by value, reference, or out.
It also supports parameter arrays using the params keyword.



Access Specifiers:
Control the visibility of class members.
C# provides several types for various access levels.

Private:
Accessible only within the same class.
No external access is allowed.

Public:
Accessible from anywhere with or without inheritance.
Just an object of the class is needed.

