Global AssemblyCache (GAC): It is used to store shared assemblies that can be used by multiple applications across the system. This helps prevent version conflicts, commonly known as DLL Hell.

 Assembler
Tools: C# provides tools like ILDASM (IL Disassembler) to convert compiled .exe or .dll files into Intermediate Language (IL) code, and ILASM (IL Assembler) to convert IL code back into executable files.

Data Types in C#: Data types are classified into two categories. Value Types include int, char, float, long, byte, double, and decimal, which are derived from System. Value Type, store data directly, and are stored in stack memory. Reference Types include class objects, interfaces, arrays, and delegates, which store the memory address where data is held and are stored in heap memory.

 C# Literals: These include different types such as String Literals like "Hello World", Character literals like 'A', Integer values like 10, Null values like null, Real numbers like 3.14, and Boolean values like true or false.

Type Conversions: There are two types—Implicit Conversion, which is automatically handled by the compiler when converting from a lower to a higher data type, and Explicit Conversion, which is manually done using type casting or conversion functions, and may result in data loss. C# provides Parse() and Try Parse() methods for safe string-to-value conversions.

Value and Reference
Type Conversion: Boxing is the process of converting a value type into a reference type, and Unboxing is the reverse, where a reference type is converted back to a value type.

 Implicitly Typed Data Types: C# offers var and dynamic types. var must be initialized at declaration and its type becomes fixed after assignment. dynamic types are resolved at runtime, need not be initialized during declaration, can hold any type of data, and incur performance overhead due to runtime boxing and unboxing.

 Nullable Types: These allow value types to also represent null. Syntax like int? or bool? is used. This is useful for database applications where fields may contain unknown values. The null coalescing operator (??) simplifies assigning default values when null is encountered.

 Operators in C#: These include Assignment (=), Arithmetic (+, -, *, /, %), Relational (==, !=, <, >), Logical (&&, ||, !), Null operators like ?? and ?., and Miscellaneous operators such as size of() and type of().

 Control Statements: C# provides several control structures. Selection Statements include if, else, and switch. Iteration Statements include while, do-while, for, and foreach, which require initial value, condition, and termination. Jump Statements like break, continue, goto, return, and throw are used to alter the flow of execution. 
* The go to statement transfers control to a labeled part of the code and should be used cautiously as it can lead to
﻿using System;


